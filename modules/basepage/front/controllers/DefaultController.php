<?php

namespace app\modules\basepage\front\controllers;

use app\modules\basepage\models\Pastor;
use app\modules\content\models\Content;
use app\modules\events\models\Event;
use app\modules\history\models\Subchapters;
use app\modules\pages\models\Pages;
use mtemplate\mcontrollers\MBTController;
use yii\data\Pagination;
use yii\helpers\StringHelper;
use yii\web\NotFoundHttpException;

class DefaultController extends MBTController
{
    public function beforeAction($action)
    {
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        $this->layout = '//front/main';
        $query = Event::find()->active();

        if (!$query->exists()) {
            throw new NotFoundHttpException();
        }

        $countQuery = clone $query;

        $count = $countQuery->count();

        $pagination = new Pagination(['totalCount' => $count, 'defaultPageSize' => 6, 'forcePageParam' => false]);

        $models = $query->limit($pagination->limit)->offset($pagination->offset)->orderBy(['created_at' => SORT_DESC])->all();

        $this->setMeta(\Yii::t('front', 'Главная'));

        $pastor = Pastor::find()->active()->one();

        return $this->render('index', ['pastor' => $pastor, 'models' => $models, 'pagination' => $pagination]);
    }

    public function actionError()
    {
        $this->layout = '//front/content';
        $this->setMeta(\Yii::t('front', 'Страница не найдена'));
        return $this->render('error');
    }

    public function actionSearch()
    {

        $this->layout = '//front/content';

        $query = \Yii::$app->request->get('query');

        if (!$query) {
            $this->setMeta(\Yii::t('front', 'Поиск по сайту'));
            return $this->render('search', ['resultModels' => []]);
        }

        $resultModels = [];

        $contentModels = Content::find()->active()->where([
           'OR',
           ['like', 'title', $query],
           ['like', 'text', $query],
        ])->all();

        foreach ($contentModels as $model) {
            $resultModels[] = [
                'type' => 'content',
                'slug' => $model->slug,
                'title' => $model->title,
                'text' => $this->getSearchText($model->text, $query)
            ];
        }

        $pagesModels = Pages::find()->active()->where([
            'OR',
            ['like', 'title', $query],
            ['like', 'text', $query],
        ])->all();

        foreach ($pagesModels as $model) {
            $resultModels[] = [
                'type' => 'pages',
                'slug' => $model->slug,
                'title' => $model->title,
                'text' => $this->getSearchText($model->text, $query)
            ];
        }

        $eventsModels = Event::find()->active()->where([
            'OR',
            ['like', 'title', $query],
            ['like', 'text', $query],
            ['like', 'short_text', $query]
        ])->all();

        foreach ($eventsModels as $model) {
            $resultModels[] = [
                'type' => 'events',
                'slug' => $model->slug,
                'title' => $model->title,
                'text' => $this->getSearchText($model->text, $query)
            ];
        }

        $historyModels = Subchapters::find()->active()->where([
            'OR',
            ['LIKE', 'title', $query],
            ['LIKE', 'text', $query],
        ])->all();


        foreach ($historyModels as $model) {
            $resultModels[] = [
                'type' => 'history',
                'id' => $model->id,
                'title' => $model->title,
                'text' => $this->getSearchText($model->text, $query)
            ];
        }

        $this->setMeta(\Yii::t('front', 'Поиск по сайту'));
        return $this->render('search', ['resultModels' => $resultModels]);
    }

    protected function getSearchText($text, $query)
    {
        $text = StringHelper::truncate(strip_tags($text), 400, '...');

        return str_replace($query, "<span>{$query}</span>", $text);
    }
}
