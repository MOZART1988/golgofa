<?php

namespace app\modules\gallery\models;

use Imagine\Exception\RuntimeException;
use mtemplate\mclasses\LanguageActiveRecord;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;
use yii\imagine\Image;
use yii\web\UploadedFile;

/**
 * This is the model class for table "gallery".
 *
 * @property integer $id
 * @property string $title
 * @property integer $is_active
 * @property string $description
 * @property string $created_at
 * @property string $updated_at
 *
 * @property array $uploadedImage
 *
 * @property GalleryImages[] $galleryImages
 */
class Gallery extends LanguageActiveRecord
{
    const CONTENT_PLACEHOLDER = '__gallery__';

    /**
     * @var GalleryImages[]
     */
    public $uploadedImage;

    public static $sizes = [357, 250];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'gallery';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title'], 'required'],
            [['is_active'], 'integer'],
            [['title'], 'string', 'max' => 255],
            [['uploadedImage'], 'file',  'maxFiles' => 100],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('admin', 'ID'),
            'title' => Yii::t('admin', 'Заголовок'),
            'is_active' => Yii::t('admin', 'Активность'),
            'description' => Yii::t('admin', 'Описание'),
            'created_at' => Yii::t('gallery', 'Дата создания'),
            'updated_at' => Yii::t('gallery', 'Дата изменения'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGalleryImages()
    {
        return $this->hasMany(GalleryImages::class,
            ['gallery_id' => 'id'])->orderBy(['gallery_images.position' => SORT_ASC]);
    }


    public function beforeDelete()
    {
        foreach ($this->galleryImages as $image) {
            $image->delete();
        }

        $dirname = Yii::getAlias('@webroot') . '/media/gallery/' . $this->id;

        if (!is_dir($dirname) ) {
            return false;
        }

        array_map('unlink', glob("$dirname/*.*"));

        rmdir($dirname);


        return parent::beforeDelete();
    }



    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at']
                ],
                'value' => new Expression('NOW()'),
            ],
        ];
    }

    public function beforeValidate()
    {
        $this->uploadedImage = UploadedFile::getInstancesByName('Gallery[uploadedImage]');

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        if (!empty($this->uploadedImage)) {

            foreach ($this->uploadedImage as $item) {
                $this->createImage($item);
            }
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function createDirectory()
    {
        if (!is_dir(\Yii::getAlias('@webroot') . '/media/gallery')) {
            mkdir(\Yii::getAlias('@webroot') . '/media/gallery');
        }

        if (!is_dir(\Yii::getAlias('@webroot') . '/media/gallery/' . $this->id)) {
            mkdir(\Yii::getAlias('@webroot') . '/media/gallery/' . $this->id);
        }

        return \Yii::getAlias('@webroot') . '/media/gallery/' . $this->id;
    }

    /**
     * @param UploadedFile $image
     * @return string
    */
    public function createImage($image)
    {
        if (null === $image) {

            return false;
        }

        $name = uniqid() . '.' . $image->extension;

        $image->saveAs($this->createDirectory() . '/' . $name);
        $sizes = self::$sizes;

        try {
            Image::thumbnail($this->createDirectory() . '/' . $name,
                $sizes[0], $sizes[1]
            )->save($this->createDirectory() . "/_{$sizes[0]}_{$sizes[1]}_{$name}", ['quality' => 100]);
        } catch (RuntimeException $e) {

        }


        return (new GalleryImages([
            'gallery_id' => $this->id,
            'filename' => $name

        ]))->save();
    }

    public function getImagesUrl()
    {
        $result = [];

        if (!empty($this->galleryImages)) {
            foreach ($this->galleryImages as $item) {
                $result[] = Url::base(true) . '/media/gallery/' . $this->id . '/' . $item->filename;
            }
        }

        return $result;
    }

    public function getImagesPreviewConfig()
    {
        $result = [];

        if (!empty($this->galleryImages)) {
            foreach ($this->galleryImages as $item) {
                $result[] = [
                    'url' => Url::to(['/gallery/default/delete-image/', 'id' => $item->id])
                ];
            }
        }

        return $result;

    }

    public static function getCkeditorList($title = 'title', $key = 'id')
    {
        $list = ArrayHelper::map(self::find()->select([
            $key,
            $title
        ])->orderBy(['id' => SORT_DESC])->asArray()->all(), $key, $title);

        return $list;
    }

}
